ScalikeJDBC 1.5.0 has been released. Now wonderfully SQLSyntax's dynamic fields became type-safe with marco validation. Special thanks to [@pab_tech](https://twitter.com/pab_tech). 

Basically your application code will be compatible. But if your code uses dynamic field name which is not a member of entity class, it might have compilation error.

    case class Member(id: Long, name: String)
    object Member extends SQLSyntaxSupport[Member] {
      def apply(m: ResultName[Member])(rs: WrappedResultSet) = new Member(rs.long(m.id), rs.string(m.name))
    }
   
    val m = Member.syntax("m") 
    val name = "Chris"
    val members = sql"""
      select ${m.result.*} from ${Member as m} 
      where ${m.namme} = ${name}""".map(Member(m.resultName)).list.apply()
                ^ Compilation error!!!

## library

for Scala 2.10, 2.9.3, 2.9.2 and 2.9.1:

    "com.github.seratch" %% "scalikejdbc" % "1.5.0"

* #103 db config issue on Heroku

## interpolation

for Scala 2.10:

    "com.github.seratch" %% "scalikejdbc-interpolation" % "1.5.0"

* type-safe SQLSyntax's dynamic fields with macro
* Added SQLSyntaxSupport#table
* #101 ResultSQLProvider which uses an external SQLSyntax value

## config

Released for Scala 2.10, 2.9.3, 2.9.2 and 2.9.1:

    "com.github.seratch" %% "scalikejdbc-config" % "1.5.0"

## test

for Scala 2.10, 2.9.3, 2.9.2 and 2.9.1:

    "com.github.seratch" %% "scalikejdbc-test" % "1.5.0"

## mapper-generator

for xsbt 0.12:

    addSbtPlugin("com.github.seratch" %% "scalikejdbc-mapper-generator" % "1.5.0")

## play-plugin

for Play 2.1.x and 2.0.x:

    "com.github.seratch" %% "scalikejdbc-play-plugin" % "1.5.0"

## dbconsole

    curl -L http://git.io/dbconsole | sh


Enjoy writing SQL and get things done!


